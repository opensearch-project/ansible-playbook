---

# bcrypt hash handling
# password_hash filter will *not* fail and output "*0" if passlib isn't installed
# we have to check this and warn user to install lib or provide _bcrypt directly
# also we have to use a static salt
# https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html#format-algorithm
# salt should be 22 chars long alpha num and end with [.Oeu]
# random_string does not support seed and
# random_password only support seed in ansible 2.12+ hence this hack
- assert:
    that: ( 'testing-passlib-is-installed' | password_hash('bcrypt', (opensearch_cluster_name | hash('md5'))[0:21]+'.') ) != "*0"
    fail_msg:
      - python passlib must be installed on ansible controller if you want
      - to use opensearch_admin_password or opensearch_kibanaserver_password
      - if you can't install passlib you'll have to provide '$2b$...' bcrypt hash
      - for opensearch_admin_password_bcrypt and opensearch_kibanaserver_password_bcrypt
  when: ( opensearch_admin_password is defined ) or ( opensearch_kibanaserver_password is defined )
  tags: always

- assert:
    that:
      - opensearch_admin_password_bcrypt is not defined
      - opensearch_kibanaserver_password_bcrypt is not defined
    fail_msg: "either set opensearch_{admin,kibana}_password_bcrypt or _password but not both"
  when: ( opensearch_admin_password is defined ) or ( opensearch_kibanaserver_password is defined )
  tags: always

- set_fact:
    opensearch_admin_password_bcrypt: "{{ opensearch_admin_password | password_hash('bcrypt', (opensearch_cluster_name | hash('md5'))[0:21]+'.') }}"
    opensearch_kibanaserver_password_bcrypt: "{{ opensearch_kibanaserver_password | password_hash('bcrypt', (opensearch_cluster_name | hash('md5'))[0:21]+'.') }}"
  when: ( opensearch_admin_password is defined ) or ( opensearch_kibanaserver_password is defined )
  tags: always

- debug:
    msg:
      - "opensearch_admin_password_bcrypt= {{ opensearch_admin_password_bcrypt }}"
      - "opensearch_kibanaserver_password_bcrypt= {{ opensearch_kibanaserver_password_bcrypt }}"
  tags: always

# actual opensearch security plugin configuration
- name: Security Plugin configuration | Create securityconfig directory
  file:
    state: directory
    path: "{{ opensearch_conf_dir }}/securityconfig"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: "0750"

- name: Security Plugin configuration | Find base securityconfig files
  find:
    paths: "{{ opensearch_home }}/plugins/opensearch-security/securityconfig"
    excludes: 'internal_users.yml'
  register: _securityconfig_files
  tags: always

- name: Security Plugin configuration | Copy base securityconfig files
  copy:
    remote_src: yes
    src: "{{ item.path }}"
    dest: "{{ opensearch_conf_dir }}/securityconfig/{{ item.path | basename }}"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: "0640"
  loop_control:
    label: "{{ item.path }}"
  loop: "{{ _securityconfig_files.files }}"

- name: Security Plugin configuration | Geneate the opensearch security internal users template
  template:
    src: internal_users.yml
    dest: "{{ opensearch_conf_dir }}/securityconfig/internal_users.yml"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: "0640"
  register: _internal_users

- name: Security Plugin configuration | Initialize the opensearch security index in opensearch
  shell: >
    bash "{{ opensearch_home }}/plugins/opensearch-security/tools/securityadmin.sh"
    -cacert "{{ opensearch_plugins_security_ssl_transport_pemtrustedcas_filepath }}"
    -cert "{{ opensearch_ssl_conf_dir }}/opensearch-{{ opensearch_cluster_name }}-admin.pem" \
    -key "{{ opensearch_ssl_conf_dir }}/opensearch-{{ opensearch_cluster_name }}-admin.key.p8" \
    -cd "{{ opensearch_conf_dir }}/securityconfig" \
    -nhnv -icl
    -h "{{ hostvars[inventory_hostname]['opensearch_host_address'] }}"
  run_once: true
  when:
    - opensearch_bootstrap_cluster | bool
    - opensearch_master_node | bool
